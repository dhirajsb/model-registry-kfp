#!/usr/bin/env bash

set -e

PROJECT_ROOT=$(realpath "$(dirname "$0")"/..)

ASSERT_FILE_PATH="${PROJECT_ROOT}/internal/server/openapi/type_asserts.go"
PATCH="${PROJECT_ROOT}/patches/type_asserts.patch"

# Remove the existing file identified by env.ASSERT_FILE_PATH
if [ -f "$ASSERT_FILE_PATH" ]; then
    rm "$ASSERT_FILE_PATH"
fi

# Create an empty file
touch "$ASSERT_FILE_PATH"

INITIAL_CONTENT=$(
    cat <<EOF
/*
 * Model Registry REST API
 *
 * REST API for Model Registry to create and manage ML model metadata
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 *
 */

// File generated by scripts/gen_type_assert.sh - DO NOT EDIT

package openapi

import (
	model "github.com/kubeflow/model-registry/pkg/openapi"
)


EOF
)

# Create the file and initialize it with the specified content
echo -e "$INITIAL_CONTENT" >"$ASSERT_FILE_PATH"

declare -A assert_functions
pattern="\/\/ (\w+) checks(.|\n)+?\n\}\n"
shell_pattern="\/\/ (\w+) checks[^\/?]+?"

# Iterate over files starting with "model_" in the internal/server/openapi/ folder
for file in "$PROJECT_ROOT"/internal/server/openapi/model_*; do
    # Check if the file is a regular file
    if [ -f "$file" ]; then

        # grab all functions in the file
        functions=$(grep -Pzo "$pattern" "${file}" | tr -d '\0')
        while [[ $functions =~ $shell_pattern ]]; do

          name="${BASH_REMATCH[1]}"
          body="${BASH_REMATCH[0]}"

          # add function to associative array
          assert_functions["$name"]="$body"

          # Remove the matched function to process next function
          functions=${functions//"$body"/}
        done

        # Remove the merged file
        rm "$file"
    fi
done

# get sorted function names in another array
sorted_names=$(for name in "${!assert_functions[@]}"; do
  echo "$name"
done | sort)

# iterate over the sorted function names array and print bodies
for name in $sorted_names; do
  echo "${assert_functions[$name]}" >>"$ASSERT_FILE_PATH"
done

gofmt -w "$ASSERT_FILE_PATH"

git apply "$PATCH"
